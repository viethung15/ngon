import socket
import requests,os,sys, time
from random import choice, randint, shuffle
from pystyle import Add, Center, Anime, Colors, Colorate, Write, System
from os.path import isfile
from bs4 import BeautifulSoup
import json
import time
from time import strftime
import os, platform, time, sys
import os
import requests
import urllib.parse
from time import strftime
from datetime import datetime
from time import sleep, strftime
import datetime
import subprocess

def install(package):
    subprocess.check_call(["pip", "install", package])

# Ki·ªÉm tra v√† c√†i ƒë·∫∑t t·ª´ng th∆∞ vi·ªán n·∫øu ch∆∞a c√≥
try:
    import faker
except ImportError:
    install("faker")

try:
    import requests
except ImportError:
    install("requests")

try:
    import colorama
except ImportError:
    install("colorama")

try:
    import bs4
except ImportError:
    install("bs4")

try:
    import pystyle
except ImportError:
    install("pystyle")

try:
    import pysocks
except ImportError:
    install("pysocks")
print('__C√°c th∆∞ vi·ªán ƒë√£ ƒë∆∞·ª£c ki·ªÉm tra v√† c√†i ƒë·∫∑t (n·∫øu c·∫ßn)__')
os.system('cls' if os.name == 'nt' else 'clear')
#Color
trang = "\033[1;37m"
xanh_la = "\033[1;32m"
xanh_duong = "\033[1;34m"
do = "\033[1;31m"
vang = "\033[1;33m"
tim = "\033[1;35m"
xanhnhat = "\033[1;36m"
#ƒê√°nh D·∫•u B·∫£n Quy·ªÅn
Hƒê_tool = trang + " " + trang + "[" + do + "+_+" + trang + "] " + trang + "=> "
mquang = trang + " " + trang + "[" + do + "√∑_+" + trang + "] " + trang + "=> "
thanh = trang + "-------------------------------------------------------------------------"
import os
def xoss(z):
    for e in z + '\n':
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.02)
xoss('\n\033[1;32m[‚óè] ƒêang Ch·∫°y V√†o Tool M√àO ƒêEN - TOOL........');time.sleep(0.1)
xoss('\n\033[1;36m[‚óè] ki·ªÉm tra sever.......')
xoss('\n\033[1;33m[‚óè] ki·ªÉm tra b·∫£n update ')
xoss('\n\033[1;34m[‚óè] th√†nh c√¥ng ƒëang ti·∫øn h√†nh v√†o tool')
def Update():
    exit('\033[1;31m[‚óè] ƒêang Ti·∫øn H√†nh V√†o Tool...... ')
    
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

# G·ªçi h√†m ƒë·ªÉ x√≥a m√†n h√¨nh
clear_screen()

# Lmao
thanh_xau=trang+'~'+do+'['+vang+'ùìõùìöùì©'+do+'] '+trang+'‚û©  '+xanhnhat
thanh_dep=trang+'~'+do+'['+xanh_la+'‚úì'+do+'] '+trang+'‚û©  '+xanhnhat
banner = r"""






                ‚ñà‚ñà      ‚ñà‚ñà‚ïó               ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
                ‚ñà‚ñà‚ïó    ‚ïî‚ñà‚ñà‚ïë              ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù
                ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë    ‚ïî‚ñà‚ñà‚ñà‚ñà‚ïó       ‚ñà‚ñà‚ïë
                ‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ïë    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù       ‚ñà‚ñà‚ïë
                ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë                 ‚ñà‚ñà‚ïë
                ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù                 ‚ïö‚ïê‚ïù
                  
                   
                      NGUY·ªÑN B√ôI VI·ªÜT H∆ØNG                                          
                                                                                 
                     NH·∫§N ENTER ƒê·ªÇ V√ÄO TOOL                                
"""
Anime.Fade(Center.Center(banner), Colors.blue_to_green, Colorate.Vertical, enter=True)
from pystyle import Add, Center, Anime, Colors, Colorate, Write, System
def clear_screen():
    os.system('cls' if os.name == 'nt' else 'clear')

def main():
    clear_screen()

if __name__ == "__main__":
    main()
# M√£ m√†u ANSI cho 7 s·∫Øc c·∫ßu v·ªìng
rainbow_colors = [
    "\033[91m",  # ƒê·ªè
    "\033[93m",  # V√†ng
    "\033[92m",  # Xanh l√°
    "\033[96m",  # Xanh d∆∞∆°ng nh·∫°t
    "\033[94m",  # Xanh d∆∞∆°ng
    "\033[95m",  # T√≠m
    "\033[97m"   # Tr·∫Øng
]

reset_color = "\033[0m"  # M√†u m·∫∑c ƒë·ªãnh
def banner():
    banner = f"""
\033[1;33m       ‚ñà‚ñà       ‚ñà‚ñà
\033[1;35m       ‚ñà‚ñà‚ïó‚ïê‚ïê‚ïê‚ïê‚ïê‚ïî‚ñà‚ñà‚ïë        
\033[1;36m       ‚ñà‚ñà‚ïëüÜÖüÜÖüÜÖüÜÖüÜÖ‚ïë‚ñà‚ñà‚ïë
\033[1;31m       ‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ïë
\033[1;31m       ‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ïë \n       ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïù
\033[97m‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê  
\033[1;31mTool By: \033[1;32mNGUY·ªÑN B√ôI VI·ªÜT H∆ØNG 
\033[1;97m[\033[1;91m->\033[1;97m]\033[1;97m telegram\033[1;31m  : \033[1;36mhttps://t.me/trumkimsa3
\033[1;97m[\033[1;91m->\033[1;97m]\033[1;97m Youtube\033[1;31m  : \033[1;36mMB BANK: 178287
\033[1;97m[\033[1;91m->\033[1;97m]\033[1;97m Zalo\033[1;31m     : \033[1;36m0397251716
\033[1;97m[\033[1;91m->\033[1;97m]\033[1;97m Telegram\033[1;31m : \033[1;36mhttps://t.me/trumkimsa3
\033[97m‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""
    for X in banner:
        sys.stdout.write(X)
        sys.stdout.flush()
        sleep(0.00125)
os.system('cls' if os.name == 'nt' else 'clear')
banner()
print("\033[1;32mmua src li√™n h·ªá üëáüëáüëáüëá")
print("\033[1;36mzalo: \033[1;33 0397251716")
print("\033[1;31mho·∫∑c")
print("\033[1;36mtelegram: \033[1;33mhttps://t.me/trumkimsa3")
from datetime import datetime
# URL ch·ª©a d·ªØ li·ªáu key VIP
url_vip = "https://raw.githubusercontent.com/nguyenkkhihi/toolgop/refs/heads/main/T%E1%BA%A1o%20key"
# ƒê∆∞·ªùng d·∫´n t·ªáp ƒë·ªÉ l∆∞u key
key_file = "lkztool_key.txt"

# H√†m ki·ªÉm tra k·∫øt n·ªëi m·∫°ng
def is_connected():
    try:
        socket.create_connection(("1.1.1.1", 53))
        return True
    except OSError:
        pass
    return False

# H√†m l·∫•y IP t·ª´ URL
def get_ip_from_url(url):
    response = requests.get(url)
    ip_address = socket.gethostbyname(response.text.strip())
    return ip_address

# Key free
def generate_free_key():
    url = "http://kiemtraip.com/raw.php"
    try:
        ip_thaycham = get_ip_from_url(url).replace('.', '')
        ip1 = int(ip_thaycham)
        ngay = int(strftime('%d'))
        key1 = str(ip1 * 942006 + 12345 * 98756 * ngay)
        return 'LKZ_tool' + key1
    except:
        print("\033[1;31mKh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng ho·∫∑c l·ªói khi l·∫•y IP. Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi.")
        exit()

# T·∫°o li√™n k·∫øt l·∫•y key free
# T·∫°o li√™n k·∫øt l·∫•y key free qua 2 l·∫ßn v∆∞·ª£t link
def generate_key_link(key_free):
    # B∆∞·ªõc 1: T·∫°o li√™n k·∫øt ƒë·∫ßu ti√™n
    url_step1 = f"https://lkztool.linkpc.net/Webkey/key.html?key={key_free}"
    rq_step1 = requests.get(f"https://yeumoney.com/QL_api.php?token=2c5aea9e4392b49789a90c8cee8a2f192986dd825912b92a12bdc221616963ba&url={url_step1}").text
    ma_step1 = rq_step1.split('var code_link = "')[1].split('";')[0]
    link_step1 = f"https://yeumoney.com/{ma_step1}"

    # B∆∞·ªõc 2: T·∫°o li√™n k·∫øt th·ª© hai d·ª±a tr√™n li√™n k·∫øt ƒë·∫ßu ti√™n
    rq_step2 = requests.get(f"https://yeumoney.com/QL_api.php?token=2c5aea9e4392b49789a90c8cee8a2f192986dd825912b92a12bdc221616963ba&url={link_step1}").text
    ma_step2 = rq_step2.split('var code_link = "')[1].split('";')[0]
    final_link = f"https://yeumoney.com/{ma_step2}"
    
    return final_link
# Key VIP
def check_vip_key(user_key):
    response = requests.get(url_vip)
    lines = response.text.strip().splitlines()

    for line in lines:
        key_from_url, date_str = line.split('|')
        
        # Ki·ªÉm tra n·∫øu key nh·∫≠p v√†o ƒë√∫ng v·ªõi key t·ª´ d√≤ng hi·ªán t·∫°i
        if user_key == key_from_url:
            # Chuy·ªÉn ng√†y t·ª´ ƒë·ªãnh d·∫°ng chu·ªói sang ƒë·ªëi t∆∞·ª£ng datetime
            expiry_date = datetime.strptime(date_str, "%d/%m/%Y")
            
            # T√≠nh th·ªùi gian c√≤n l·∫°i
            current_time = datetime.now()
            remaining_time = expiry_date - current_time
            
            # Ki·ªÉm tra xem key ƒë√£ h·∫øt h·∫°n hay ch∆∞a
            if remaining_time.total_seconds() > 0:
                days_left = remaining_time.days
                hours_left = remaining_time.seconds // 3600
                minutes_left = (remaining_time.seconds % 3600) // 60
                print(f"\033[1;32mTh·ªùi gian c√≤n l·∫°i: \033[1;33m{days_left} \033[1;32mng√†y, \033[1;33m{hours_left} \033[1;32mgi·ªù, \033[1;33m{minutes_left} \033[1;32mph√∫t")
                return True
            else:
                print("\033[1;31mKey VIP ƒë√£ h·∫øt h·∫°n.")
                return False
    print("\033[1;31mKey VIP kh√¥ng h·ª£p l·ªá.")
    return False

# L∆∞u key v√†o t·ªáp
def save_key(key):
    with open(key_file, "w") as file:
        file.write(key)

# ƒê·ªçc key ƒë√£ l∆∞u t·ª´ t·ªáp
def read_saved_key():
    try:
        with open(key_file, "r") as file:
            saved_key = file.read().strip()
            return saved_key
    except FileNotFoundError:
        return None

# Ch·ªçn lo·∫°i key
def main():
    print("\033[1;32mCh·ªçn lo·∫°i key ƒë·ªÉ s·ª≠ d·ª•ng:")
    print("\033[1;36m1. Key free")
    print("\033[1;36m2. Key VIP")
    choice = input("\033[1;32mNh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1 ho·∫∑c 2): \033[1;36m")
    os.system('cls' if os.name == 'nt' else 'clear')
    banner()
    # Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng
    if not is_connected():
        print("\033[1;31mH√£y ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i!")
        exit()

    # Key free
    if choice == "1":
        key_free = generate_free_key()
        saved_key = read_saved_key()
        if True:
            print("\033[1;36mƒêang s·ª≠ d·ª•ng key ƒë√£ l∆∞u.")
            os.system('cls' if os.name == 'nt' else 'clear')
            banner()
        else:
            print("\033[1;31mVui l√≤ng l·∫•y l·∫°i key free.")
            print("\033[1;33mM·ªói IP m·ªôt key v√† m·ªói ng√†y m·ªôt l·∫ßn.")
            link = generate_key_link(key_free)
            print("\033[1;32mV∆∞·ª£t link sau ƒë·ªÉ l·∫•y key free: \033[1;36m", link)
            new_key = input("\033[1;32mNh·∫≠p key ƒë√£ l·∫•y: \033[1;36m")
            if new_key == key_free:
                save_key(new_key)
                print("\033[1;32mKey ƒë√£ ƒë∆∞·ª£c l∆∞u.")
                os.system('cls' if os.name == 'nt' else 'clear')
                banner()
            else:
                print("\033[1;31mKey kh√¥ng h·ª£p l·ªá.")
    
    # Key VIP
    elif choice == "2":
        saved_key = read_saved_key()
        if True:
            print("\033[1;32mB·∫¢N QUY·ªÄN THU·ªòC: \033[1;31mùêçùêÅùêïùêá TOOL")
        else:
            while True:
                new_key = input("\033[1;32mNh·∫≠p key VIP c·ªßa b·∫°n: \033[1;36m")
                os.system('cls' if os.name == 'nt' else 'clear')
                banner()
                if check_vip_key(new_key):
                    save_key(new_key)
                    print("\033[1;32mB·∫¢N QUY·ªÄN THU·ªòC: \033[1;31mùêçùêÅùêïùêá TOOL")
                    break
                else:
                    print("\033[1;31mKey kh√¥ng h·ª£p l·ªá.")
    else:
        print("\033[1;31mL·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
if __name__ == "__main__":
    main()
den = "\033[1;90m"
luc = "\033[1;32m"
trang = "\033[1;37m"
red = "\033[1;31m"
vang = "\033[1;33m"
tim = "\033[1;35m"
lamd = "\033[1;34m"
lam = "\033[1;36m"
hong = "\033[1;95m"
# M√£ m√†u ANSI cho nhi·ªÅu m√†u s·∫Øc
rainbow_colors = [
    "\033[91m",  # ƒê·ªè
    "\033[93m",  # V√†ng
    "\033[92m",  # Xanh l√°
    "\033[96m",  # Xanh d∆∞∆°ng nh·∫°t
    "\033[94m",  # Xanh d∆∞∆°ng
    "\033[95m",  # T√≠m
    "\033[97m"   # Tr·∫Øng
]

reset_color = "\033[0m"  # M√†u m·∫∑c ƒë·ªãnh

def in_dong_khung_cau_vong(text):
    # T·∫°o khung v·ªõi m√†u s·∫Øc thay ƒë·ªïi cho m·ªói k√Ω t·ª± trong thanh ngang v√† n·ªôi dung
    khung_tren = "‚îå"
    khung_duoi = "‚îî"
    
    for i in range(len(text) + 2):
        khung_tren += rainbow_colors[i % len(rainbow_colors)] + "‚îÄ" + reset_color
    khung_tren += "‚îê"
    
    # T√¥ m√†u cho n·ªôi dung b√™n trong
    noi_dung = ""
    for i, char in enumerate(text):
        noi_dung += rainbow_colors[i % len(rainbow_colors)] + char
    noi_dung = noi_dung + reset_color
    
    dong_duoc_khung = f"{khung_tren}\n{rainbow_colors[6]}‚îÇ {noi_dung} ‚îÇ{reset_color}\n{khung_duoi}"
    
    print(dong_duoc_khung)

# M√£ m√†u ANSI cho nhi·ªÅu m√†u s·∫Øc
rainbow_colors = [
    "\033[91m",  # ƒê·ªè
    "\033[93m",  # V√†ng
    "\033[92m",  # Xanh l√°
    "\033[96m",  # Xanh d∆∞∆°ng nh·∫°t
    "\033[94m",  # Xanh d∆∞∆°ng
    "\033[95m",  # T√≠m
    "\033[97m"   # Tr·∫Øng
]

reset_color = "\033[0m"  # M√†u m·∫∑c ƒë·ªãnh

def in_mau(text):
    # T√¥ m√†u cho n·ªôi dung
    noi_dung = ""
    for i, char in enumerate(text):
        noi_dung += rainbow_colors[i % len(rainbow_colors)] + char
    noi_dung += reset_color
    
    print(noi_dung)
    

# C√°c d√≤ng ƒë∆∞·ª£c ƒë√≥ng khung 7 s·∫Øc c·∫ßu v·ªìng
print("\033[1;95m‚ïî\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïó")
print("\033[1;95m‚ïë  \033[1;32mTool Auto Golike    \033[1;95m‚ïë")
print("\033[1;95m‚ïö\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïù")
in_dong_khung_cau_vong('[ùêïùêá]‚û© Nh·∫≠p S·ªë [1] Tool Auto TikTok')
in_dong_khung_cau_vong('[ùêïùêá]‚û© Nh·∫≠p S·ªë [1.3] Tool Auto Instagram')
print("\033[1;95m‚ïî\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïó")
print("\033[1;95m‚ïë  \033[1;32mTool Trao ƒê·ªïi Sub   \033[1;95m‚ïë")
print("\033[1;95m‚ïö\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïù")
in_dong_khung_cau_vong('[ùêïùêá]‚û© Nh·∫≠p S·ªë [2] Tool TDS TikTok')
in_dong_khung_cau_vong('[ùêïùêá]‚û© Nh·∫≠p S·ªë [2.1] Tool TDS Facebook')
in_dong_khung_cau_vong('[ùêïùêá]‚û© Nh·∫≠p S·ªë [2.2] Tool TDS Pro5')
in_dong_khung_cau_vong('[ùêïùêá]‚û© Nh·∫≠p S·ªë [2.3] Tool TDS Pro5v1')
in_dong_khung_cau_vong('[ùêïùêá]‚û© Nh·∫≠p S·ªë [2.4] Tool TDS Instagram')
print("\033[1;95m‚ïî\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïê\033[1;36m‚ïê\033[1;95m‚ïó")


chon = str(input('\033[91mùêïùêá\033[93m‚û© \033[96mNh·∫≠p S·ªë : \033[92m'))
#golike
if chon == '1':
    exec(requests.get('https://raw.githubusercontent.com/viethung15/viethungtool/902fbabedaee1376e20d8691391ef34c5dac26d1/README.md').text)
elif chon == '1.3':
    exec(requests.get('https://raw.githubusercontent.com/nguyenkkhihi/toolgop/refs/heads/main/golikeig.py').text)
#trao ƒë·ªïi sub
elif chon == '2':
	exec(requests.get('https://raw.githubusercontent.com/nguyenkkhihi/toolgop/refs/heads/main/tdstiktok.py').text)
elif chon == '2.1':
	exec(requests.get('https://raw.githubusercontent.com/nguyenkkhihi/toolgop/refs/heads/main/tdsfb.py').text)
elif chon == '2.2':
	exec(requests.get('https://raw.githubusercontent.com/nguyenkkhihi/toolgop/refs/heads/main/tdspro5.py').text)
elif chon == '2.3':
	exec(requests.get('https://raw.githubusercontent.com/nguyenkkhihi/toolgop/refs/heads/main/tdspro5v1.py').text)
elif chon == '2.4':
	exec(requests.get('https://raw.githubusercontent.com/nguyenkkhihi/toolgop/refs/heads/main/tdsig.py').text)
else:
    print("Sai L·ª±a Ch·ªçn")
    exit()